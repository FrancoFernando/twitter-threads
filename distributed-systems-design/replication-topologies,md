https://twitter.com/Franc0Fernand0/status/1591447702247657474?s=20&t=VtHDVAlWR0fFxQJvbbztog

There are 3 main databases replication topologies:

• single leader
• multi leader
• leaderless

These are their differences and  trade-offs: {1/11}

1. Single leader

A single database acts as a leader, receiving and applying all write requests.

All other replicas (followers) can only receive and handle read requests.

The main benefit of this topology is that it avoids write conflicts.

{2/11}

But this benefit comes with some downsides.

1st, it performs poorly with write intensive applications since the leader becomes a bottleneck.

2nd, the system latency increases.

The leader can't be close to all the clients and the overall round trip times are higher.

{3/11}

3rd, it's necessary to implement a failover strategy in case the leader goes down.

This is quite hard and requires solving problems like:

- electing a new leader
- being sure that the leader failed
- making the replicas agree on the new leader

{4/11}

2. Multi Leader

More databases act as leaders, receiving and applying the write requests.

The main benefit is that more databases perform writes, being located closer to the clients.

This increases the write throughput and reduce the latency.

{5/11}

The drawback is that it's necessary to solve write conflicts.

Some possible solutions are:

- attach a timestamp to each write and let followers apply the write with highest value

- record the conflicts and write application code to let users manually resolve them

{6/11}

- store all the conflicting writes and return them to the clients when they try to read that data. 

The client is then responsible for solving the conflict and write the data back to the database. 

CouchDB follows this last approach.

{7/11}

3. Leaderless

Each database instance can accept writes and the clients can send writes concurrently.

As soon a client gets a confirmation from some of the instances, a write is successful.

The benefit is that failures are tolerated easily without failover strategies.

{8/11}

But having no leader handling any kind of synchronization causes other issues.

First of all if some writes fail, the corresponding instances will have staled data. 

To deal with this, clients need to read data from several instances concurrently.

{9/11}

The instances then return their data with a kind of version number.

The clients can use this number to decide which data to keep and which to discard.

But how to update instances having staled data?

{10/11}

There are 2 common techniques.

- read repair: when a client detects that a read data is stale, it sends a write request with the correct data

- background process: a background process take care of periodically synchronize all database instances.

{11/11}




